apply plugin: 'base'


def commonOutputDirectory = "${project.buildDir}/templateOutput/"

task generateAll() {
     dependsOn 'generateListHtml'
     dependsOn 'generateReadme'
}

task generateAllOrdered(type: GradleBuild) {
     tasks = [ 'generateReadme', 'generateListHtml' ]
}

task generateListHtml(type: RunGroovyTemplateTask) {
     inputTemplate = file('templates/htmllist.mte')
     inputJson = file('java-parsers.json')
     outputFile = file(commonOutputDirectory + "htmllist.html")
}

task generateListCsv(type: RunGroovyTemplateTask) {
     inputTemplate = file('templates/csvlist.mte')
     inputJson = file('java-parsers.json')
     outputFile = file(commonOutputDirectory + "csvlist.csv")
}

task generateReadme(type: RunGroovyTemplateTask) {
     inputTemplate  = new File('templates/ReadmeMd.ste')
     inputJson = file('java-parsers.json')
     outputFile = new File('build/templateOutput/Readme.md')
}


task wrapperOld(type: Wrapper) {
    gradleVersion = '4.8'
}


class RunGroovyTemplateTask extends DefaultTask {
      @InputFile
      def File inputTemplate

      @InputFile
      def File inputJson

     // new File(project.file("${project.buildDir}/templateOutput"), "filename")
      @OutputFile
      def File outputFile

      @TaskAction
      void perform() {
          def jsonText = inputJson.getText()
          def slurper = new groovy.json.JsonSlurper()
          def model = slurper.parseText(jsonText)

          def templateText = inputTemplate.getText()

          def engine
          def templateFileAsString = inputTemplate.toString()
          if (templateFileAsString.endsWith(".ste")) {
              engine = new groovy.text.SimpleTemplateEngine()
          } else if (templateFileAsString.endsWith(".mte")) {
               def config = new groovy.text.markup.TemplateConfiguration()
               config.setAutoIndent(true)
               config.setAutoEscape(true)
               engine = new groovy.text.markup.MarkupTemplateEngine(config)
          } else {
               print("ERROR")
               System.exit(1)
          }

          def template = engine.createTemplate(templateText)
          def output = template.make(model)

          outputFile.text = output
      }
}
